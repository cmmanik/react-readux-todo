{"version":3,"sources":["component/modal/Modal.jsx","store/actions/TodoAction.js","store/actions/actionType.js","component/modal/TopNav.jsx","component/todo/item.jsx","component/todo/Todos.jsx","component/App.js","store/reducers/TodoReducers.js","store/reducers/rootReducers.js","store/index.js","serviceWorker.js","index.js"],"names":["Modals","state","modal","title","description","toggle","_this","setState","changeHandler","e","Object","defineProperty","target","name","value","submitHandle","preventDefault","id","parseInt","Date","now","todo","isComplete","props","addTodo","_this$state","this","react_default","a","createElement","Button","style","marginTop","color","onClick","Modal","isOpen","className","ModalHeader","ModalBody","Form","onSubmit","FormGroup","Label","for","Input","type","onChange","placeholder","React","Component","connect","payload","filterTodo","activeFilter","ButtonGroup","marginLeft","first_style","width","background","height","display","float","textAlign","borderRadius","padding","marginRight","textColor","TodoItem","_ref","delet","mark","ListGroupItem","charAt","toUpperCase","concat","marginBottom","UncontrolledCollapse","toggler","Card","CardBody","TodoLists","collapse","isopen","balControl","console","log","todos","status","filter","_this2","_this$props","markDone","deleteTodo","length","filterTodos","ListGroup","map","item","colaspstate","key","collap","App","modal_TopNav","modal_Modal","todo_Todos","init","Todos","arguments","undefined","action","toConsumableArray","objectSpread","removeTodo","rootReduceswr","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Boolean","location","hostname","match","ReactDOM","render","es","src_component_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c6ebeb1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap';\r\nimport {connect} from 'react-redux';\r\nimport {addTodo} from '../../store/actions/TodoAction'\r\nclass Modals extends React.Component {\r\n    state = {\r\n        modal: false,\r\n        title:'',\r\n        description:''\r\n      };\r\n\r\n  toggle = ()=> {\r\n    this.setState({modal: !this.state.modal });\r\n  }\r\n  changeHandler = e => {\r\n      this.setState({[e.target.name]:e.target.value})\r\n  }\r\n  submitHandle = e => {\r\n        e.preventDefault()\r\n        this.setState({modal: !this.state.modal });\r\n        let id = parseInt(Date.now())\r\n        const todo = {\r\n            title:this.state.title,\r\n            description:this.state.description,\r\n            isComplete:false,\r\n            id:id\r\n        }\r\n        this.props.addTodo(todo)\r\n        this.setState({\r\n          modal:!this.state.modal,\r\n          title:'',\r\n        description:''\r\n        })\r\n        \r\n  }\r\n\r\n  render() {\r\n\r\n    let {title, description}  = this.state\r\n    return (\r\n      <div>\r\n        <Button style={{marginTop:'-67px'}} color=\"danger\" onClick={this.toggle}>Add</Button>\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n          <ModalHeader toggle={this.toggle}>Create new Todo</ModalHeader>\r\n          <ModalBody>\r\n          <Form onSubmit={this.submitHandle}>\r\n            <FormGroup>\r\n            <Label for=\"title\">Title</Label>\r\n            <Input type=\"text\" onChange={this.changeHandler} value={title} name=\"title\" id=\"title\" placeholder=\"Todo Title\" />\r\n            </FormGroup>\r\n            <FormGroup>\r\n            <Label for=\"description\">Todo Description</Label>\r\n            <Input type=\"textarea\" onChange={this.changeHandler} value={description} name=\"description\" id=\"description\" placeholder=\"Todo description\" />\r\n            </FormGroup>\r\n            <Button color=\"primary\">Submit</Button>\r\n        </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default connect(null, {addTodo}) (Modals);","import { ADD_TODO, MARK_DONE,FILTER_TODO, EDITE_TODO, REMOVE_TODO } from \"./actionType\";\r\n\r\nexport const addTodo = todo => {\r\n    return {type:ADD_TODO, payload:todo}\r\n}\r\n\r\nexport const markDone = id => {\r\n    return {type:MARK_DONE, payload:id}\r\n}\r\n\r\nexport const filterTodo = activeFilter => {\r\n    return {type:FILTER_TODO, payload:activeFilter}\r\n}\r\n\r\nexport const editeTodo = editeTod => {\r\n    return {type:EDITE_TODO, payload:editeTod}\r\n}\r\n\r\nexport const deleteTodo = id => {\r\n    return{type:REMOVE_TODO, payload:id}\r\n}","export const ADD_TODO = 'ADD_TODO';\r\nexport const REMOVE_TODO = 'REMOVE_TODO';\r\nexport const MARK_DONE = 'MARK_DONE';\r\nexport const FILTER_TODO = 'FILTER_TODO';\r\nexport const EDITE_TODO = 'EDITE_TODO';","import React from 'react'\r\nimport { Button, ButtonGroup} from 'reactstrap'\r\nimport {filterTodo } from '../../store/actions/TodoAction';\r\nimport {connect } from 'react-redux'\r\nconst TopNav = (props) =>{\r\n    let {filterTodo} = props;\r\n    return (\r\n             <ButtonGroup style={{marginLeft:'56px'}}>\r\n                <Button color=\"primary\" onClick={() => filterTodo('ALL')}>All</Button>\r\n                <Button color=\"danger\" onClick={() => filterTodo('ACTIVE')} >Active</Button>\r\n                <Button color=\"success\" onClick={() => filterTodo('COMPLETE')} >Done</Button>\r\n             </ButtonGroup>\r\n      \r\n    )\r\n}\r\n\r\nexport default connect(null, {filterTodo})(TopNav);","import React from 'react';\r\nimport { UncontrolledCollapse, CardBody, Card, Button, ListGroupItem } from 'reactstrap';\r\n\r\nconst first_style = {\r\n  width: \"40px\",\r\n  background: \"#E100FF\",\r\n  height: \"40px\",\r\n  display: \"block\",\r\n  float: \"left\",\r\n  textAlign: \"center\",\r\n  borderRadius: \"50%\",\r\n  padding: \"7px\",\r\n  marginRight: \"10px\",\r\n  textColor:'white',\r\n}\r\n\r\n\r\nconst TodoItem = ({todo, delet, mark}) => (\r\n<ListGroupItem style={{background:\"linear-gradient(to right,#4568dc, #b06ab3)\"}}>\r\n    <div className=\"row\"  >\r\n      <div className=\"col-md-7\">\r\n        <div className=\"first_chrac\" style={first_style}>\r\n            {todo.title.charAt(0).toUpperCase()}\r\n        </div>\r\n      <span color=\"primary\" className=\"d-flex\" id={`toggler${todo.id}`} style={{ marginBottom: '1rem' }}>\r\n      {todo.isComplete ? <p><strike>{todo.title}</strike></p>: <p>{todo.title}</p> }\r\n      </span>\r\n      <UncontrolledCollapse toggler={`#toggler${todo.id}`}>\r\n        <Card>\r\n          <CardBody>\r\n          {todo.description}\r\n          </CardBody>\r\n        </Card>\r\n      </UncontrolledCollapse>\r\n      </div>    \r\n      <div className=\"col-md-5\">\r\n      <div className=\"ml-auto\">\r\n        <Button color=\"danger\" onClick={() => delet(todo.id)} style={{marginRight:'10px'}} className=\"ml-auto\">Delete Todo</Button>\r\n        <Button color=\"primary\" onClick={() => mark(todo.id)} className=\"mr-auto\">Add Done</Button>\r\n      </div>\r\n      </div>\r\n    </div>\r\n    </ListGroupItem>   \r\n);\r\n\r\nexport default TodoItem;","import React, { Component } from 'react'\r\nimport {ListGroup} from 'reactstrap'\r\nimport TodoItem from './item';\r\nimport {connect} from 'react-redux'\r\nimport {markDone, deleteTodo} from '../../store/actions/TodoAction'\r\nclass TodoLists extends Component {\r\n\r\n    state = {\r\n        collapse: false,\r\n        isopen:false\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({ collapse: !this.state.collapse });\r\n    }\r\n\r\n\r\n    balControl = e => {\r\n        console.log(e)\r\n    }\r\n\r\n    filterTodo(todos, status) {\r\n        switch (status) {\r\n            case 'ACTIVE':\r\n                return todos.filter(todo => todo.isComplete === false);\r\n                \r\n            case 'COMPLETE':\r\n                return todos.filter(todo => todo.isComplete === true);\r\n                \r\n            default: return todos;\r\n        }\r\n    }\r\n    render() {\r\n        \r\n        let {todos, markDone, status, deleteTodo} = this.props;\r\n        if(todos.length === 0) return <p>Ther are no Todo</p>\r\n      \r\n       let filterTodos = this.filterTodo(todos,status )\r\n        return (\r\n        <ListGroup>\r\n               {filterTodos.map(todo => \r\n                    <TodoItem\r\n                        colaspstate={this.state.collapse} \r\n                        todo={todo} key={todo.id} \r\n                        collap={this.toggle} \r\n                        mark={markDone} \r\n                    delet={deleteTodo} />)}\r\n          </ListGroup>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = state => ({\r\n   todos:state.todos.todos,\r\n   status:state.todos.filter\r\n})\r\n\r\nexport default connect(mapDispatchToProps, {markDone, deleteTodo})(TodoLists);","import React, { Component } from 'react';\nimport Modals from './modal/Modal';\nimport TopNav from './modal/TopNav';\nimport TodoLists from './todo/Todos';\nimport './App.css'\n\n\nclass App extends Component {\n\n\n  render() {\n \n    return (\n      <div className=\"App\" style={{marginTop:'10px'}}>\n        <div className=\"container\">\n         <div className=\"row\">\n           <div className=\"col-md-7 m-auto\">\n           <TopNav/>\n            <Modals/>\n            <TodoLists/>\n           </div>\n         </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;","import { ADD_TODO, MARK_DONE, FILTER_TODO, REMOVE_TODO, } from \"../actions/actionType\";\r\nconst init = {\r\n    todos:[{\r\n        \"title\": \"first todo\",\r\n        \"description\": \"this is my first todo\",\r\n        \"isComplete\": false,\r\n        \"id\": 1563217752827\r\n        },\r\n        {\r\n        \"title\": \"first todo\",\r\n        \"description\": \"this is my first todo\",\r\n        \"isComplete\": true,\r\n        \"id\": 1563217752858827\r\n        }],\r\n    filter:'ALL'\r\n}\r\nconst Todos = (state=init, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODO : {\r\n            let todos = [...state.todos];\r\n            todos = [action.payload, ...todos]\r\n            return {\r\n                ...state,\r\n                todos\r\n            };\r\n        }\r\n        case MARK_DONE : {\r\n            let todos = [...state.todos];\r\n            todos = todos.map(todo => {\r\n                if(todo.id === action.payload) {\r\n                    todo.isComplete=!todo.isComplete\r\n                }\r\n                return todo\r\n            })\r\n            return {\r\n                ...state,\r\n                todos\r\n            }\r\n        }\r\n\r\n        case FILTER_TODO : {\r\n            return {\r\n                ...state,\r\n                filter:action.payload\r\n            }\r\n        }\r\n\r\n        case REMOVE_TODO : {\r\n            const todos = removeTodo(state.todos, action.payload)\r\n            return {\r\n                ...state,\r\n                todos\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default Todos;\r\n\r\nfunction removeTodo(todos, id) {\r\n    return todos = todos.filter(todo => todo.id !== id)\r\n}","import {combineReducers} from 'redux';\r\nimport Todos from './TodoReducers';\r\n\r\nconst rootReduceswr = combineReducers({\r\n    todos:Todos\r\n})\r\n\r\nexport default rootReduceswr;\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReduceswr from './reducers/rootReducers';\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReduceswr, composeEnhancers(\r\n    applyMiddleware()\r\n))\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport {Provider} from 'react-redux';\nimport store from './store'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}